Notes

Day 1
    I have forgotten entirely how Python works
    Part 2
        Find out how often number from A appears in B, multiple A by that number, add together
        is left list unique-no, doesn't matter
Day 2
    Parse each line, check diff between each number, if greater than 3, unsafe, otherwise safe

    Allowed remove one

    Increase 

    2,4,6,8

    2,2,4,6,8

        
    6,4,8,10,12
    3, 12, 10, 8
    3, 12, 5, 7
    14, 12, 9, 10, 

    how know remove self or next or previous?
    know min/max diff two steps is 2-6 - irrelevant
    18, 


    brute force?
        ugh, omfg
        if find bad
            then just iterate every variant of line with one removed
            if one bad found, bad, if one safe found, good
            fuckin lol, that'd 
Day 3
    Looking for 
        mul(1-3digits,1-3digits)
        Need to actually do calculation, then add results
    Parse string
        regex? what it's made for, but I suspcet part 2 is designed to screw over people who use regex for this

        mul\([0-9]{1,3},[0-9]{1,3}\)
Day 4
    Todo: Stop bruteforcing once I've caught up to current day
    Find count of XMAS
        can be vertical, horizontal, diagonal, forwards, backwards (overlapping other words??)
    Brute Force:
        Array of arrays

        Search each row till find X, then search all possible directions for M, if found search A, search s
        I could be SUPER fucking lazy here, and pad the edgef the array with Z, so I don't have to care about oob
        or just make sure numbers never negative, tbh.
Day 5
    Rules X|Y
    Means X MUST be before Y

    Input: list of numbers
    Initial thought:
        
        Grab number num,
        grab all numbers before it
            
    For each number, build set of pages that must come after, set of pages that must come before it
    
    Num: [before], [after]
    75: [47, 98], [12, 87]

    75, 2, 1,87, 3,5

    Brute forcing, just check each time, no technical need to do this though?
    Does number HAVE to exist?

    inefficient it 
    
    just build after?

    X|Y

    X: [Ys]
    if get X, just assert that no numbers behind it are in Ys, that's all

    part 2:
        UGH, fix the broken ones, really wanted it to not be this

        first, save all broken ones

        then...how order (lmao could just brute force it, try every variant)
        lets be slightly better

        have x boxes, length of update

        for each number, I know the numbers that must be after it (it's in the dict)

        for each number, check numbers before it, if any in rules_dict, need to move them to NUMBER + 1 index
            instead, move number behind 
        2, 4, 7, 5, 9

        rule is 5|7
                9:5
        so then
            move 7 immediately after 5 (index +1)
            no move 5 before 7
        2, 4, 5, 7, 9       
        so then get to 9, 
        5 is behind 9, but moving 5
        making sure that everything that's in front of number should be
        so move backwards, never undoes anything else?

        for each  number, check what numbers are before it
        for each number in dict that matches
            move current number to match-1 index
            nope, that also doesn't work, need to move number as far left as possible
            hrm
            order dict?
        screw it, brute force

        Actually sensible approach
            when have number, know what needs to be ahead of it
            move it immediately behind the left-most number of all numbers it needs to be behind
            is that all? will doing that prevent any other rules from being broken?

            build set of values in array (rather than iterating)

            so, check 4 is valid, if not update return array
            then check 9 is valid (not i+1 in response)
            but need to check that value AGAINST response array
            
            5|9
            5|4
            3|5

            4,9,5,2,3
                - find left most number in array that's in rules for 5 ( which is 4)
            5,4,9,2,3
                - find left most number in array that's in rules for 3 (Which is 5)
            3,5,4,9,2,3

            Have to come back to this one

Day 6
    Read in map
    just move through it, replacing each step location with x, until out of bounds
    once out of bounds, go through array again, counting X

    How many places can add obstruction to get guard stuck in a loop
    Fuck me how is this supposed to go?
    Can't brute force this one (well ok I could but I don't want to)
    WHat's the algo here?
        How supposed to know ahead of time what causes a loop?

        Ok, so it HAS to be somewhere that the guard walks
        that narrows down the possible locations that could contain a new obstruction
        and if guard bumps against it twice, know there's an infinite loop
            if guard doesn't hit it twice, they will just leave area
        is there some other algo there?

    so, run guard through once
    For every X, EXCEPT STARTING LOCATION, place obstruction
        run guard through again,
            if guard hits same side of obstruction twice, know its a loop
            how test tht
            when step, check if next location would be obstruction, record hit AND direction facing
        otherwise guard will eventually leave


